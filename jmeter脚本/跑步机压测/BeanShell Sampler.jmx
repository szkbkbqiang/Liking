<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/admin/Desktop/apache-jmeter-3.3/lib/ext/JmeterSocket.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512370116000</longProp>
        <longProp name="ThreadGroup.end_time">1512370116000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">/Users/admin/Desktop/jmeter脚本/跑步机压测/device_id.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">device_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">/Users/admin/Desktop/jmeter脚本/跑步机压测/device_name.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">device_name</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;gateway_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;device_name&quot;, &quot;${device_name}&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    String data = Utils.bytesToHex(result);
    vars.put(&quot;65&quot;,data);
    return data;
    return getVariables();
    //vars.get(&quot;65&quot;);
    
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="设备注册(0x65)" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${65}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;, &quot;1&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);

            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;1&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="用户刷卡登录" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${1}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="false">
            <stringProp name="CounterConfig.start"></stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr"></stringProp>
            <stringProp name="CounterConfig.name"></stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <ConfigTestElement guiclass="TCPConfigGui" testclass="ConfigTestElement" testname="TCP取样器配置" enabled="true">
            <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">27919</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request"></stringProp>
            <boolProp name="TCPSampler.closeConnection">false</boolProp>
          </ConfigTestElement>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="app_version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">app_version</stringProp>
                <stringProp name="Argument.value">1.5.1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
                <stringProp name="Argument.value">iOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="request_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">request_id</stringProp>
                <stringProp name="Argument.value">123456789</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="signature" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">signature</stringProp>
                <stringProp name="Argument.value">${signature}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="check" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">check</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">testapp.likingfit.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/sms/captcha/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">zh-Hans-CN;q=1.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip;q=1.0, compress;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Liking/1.4.9 (com.goodchef.LikingUserTest; build:15; iOS 10.2.1) Alamofire/4.5.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">captcha</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;captcha&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">err</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1634039171">&quot;err_code&quot;:0,</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="false">
          <collectionProp name="UserParameters.names"/>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1"/>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设备注册(0x65)" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;

private static final char[] HEX_CHAR = {&apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;};

    /**
     * byte[] to hex string
     *
     * @param bytes
     * @return
     */
    public static String bytesToHex(byte[] bytes) {
        // 一个byte为8位，可用两个十六进制位标识
        char[] buf = new char[bytes.length * 2];
        int a = 0;
        int index = 0;
        for(byte b : bytes) { // 使用除与取余进行转换
            if(b &lt; 0) {
                a = 256 + b;
            } else {
                a = b;
            }

            buf[index++] = HEX_CHAR[a / 16];
            buf[index++] = HEX_CHAR[a % 16];
        }
        return new String(buf);
    }
    

  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;${device_name}&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    String data = bytesToHex(result);
    
    return data ;
    // return getVariables();
    //vars.get(&quot;65&quot;);
    vars.put(&quot;65&quot;,data);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">65</stringProp>
            <stringProp name="RegexExtractor.regex">.+</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">err</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="设备注册(0x65)" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">true</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${65}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="TCPSampler.EolByte">4</stringProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="心跳协议(0x64) " enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x64;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;64&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="心跳协议(0x64) " enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${64}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设备批量上报(0x68) " enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x68;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
        	[
        	{
            object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;${device_id}&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        	}
        	{
        	  object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;${device_id}&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);	
        		}
        ]
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="用户刷卡登录" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            
		  &quot;cmd&quot;: 1,
		  &quot;data&quot;:{
		    &quot;device_id&quot;:&quot; ${device_id}&quot;, //跑步机设备ID string
		    &quot;bracelet_id&quot;:&quot;${bracelet_id}&quot;, //手环ID unsigned int
		          }
		

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="用户刷卡登出" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
             &quot;cmd&quot;: 3,
		   &quot;data&quot;:{
		    &quot;device_id&quot;:&quot; ${device_id}&quot;, //跑步机设备ID string
		    &quot;bracelet_id&quot;:&quot;${bracelet_id}&quot;, //手环ID unsigned int
		          }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="上报跑步机基础信息" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
           &quot;cmd&quot;: 5,
 		 &quot;data&quot;:{
    			&quot;device_id&quot;:&quot; a000000100010001&quot;, //跑步机设备ID string
			&quot; total_distance&quot;:120000,//总运动距离 int
			&quot;total_time&quot;:36000,//总运动时间 int
			&quot;power_time&quot;:20,//总开关机次数 int
			&quot;member_status&quot;:0,//是否同步会员数据 int
			&quot;member_time&quot;:244,//上次同步数据的时间 int
	 			 }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname=" 上报锻炼数据" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
		&quot;cmd&quot;: 6,
		&quot;data&quot;:{
			&quot;device_id&quot;:&quot; a000000100010001&quot;, //跑步机设备ID string
			&quot;bracelet_id&quot;:2132323,//手环ID int
			&quot; period&quot;:110, //总运动时间 int
			&quot;distance&quot;:2000, //总运动距离 int
			&quot;cal&quot;:200,//消耗卡路里 int
			&quot;type&quot;:1,// 1 快速启动 2 设定目标  3 预设课程 int
			&quot;aim_type&quot;:0,// 1 设定运动时间  2 设定公里数 3 设定卡路里 int
			&quot;aim&quot;:988,//运动目标 int
			&quot;achieve&quot;:0,// 0 设定目标未完成  1 设定目标完成 int
			&quot;run_time&quot;:1243243,//跑步时间戳
  }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取二维码" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
		  &quot;cmd&quot;: 8,
		  &quot;data&quot;:{
		    &quot;device_id&quot; : &quot;a000000100010001&quot;, //门禁刷卡设备ID string
		    &quot;device_type&quot;:1//设备类型 int 
		    &quot;qrcode_type&quot;:1//二维码类型 1绑定 2解绑
		  }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="跑步中上报数据" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
		  &quot;cmd&quot;: 12,
		  &quot;data&quot;:{ 
			 &quot;bracelet_id&quot;:123//手环ID int
		      &quot;step&quot;:100 //此次上报距离上次的距离 单位:米
		      &quot;distance&quot;:
		  }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="跑步开始上报" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
		  &quot;cmd&quot;: 17,
		  &quot;data&quot;:{ 
			 &quot;bracelet_id&quot;:123//手环ID int
		      &quot;device_id&quot;:&quot;123456&quot; //设备ID string
		  }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="0000下发用户前后排名,超越" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;


  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;test000001&quot;);
            object.put(&quot;gateway_id&quot;, &quot;a000000100010000&quot;);
            object.put(&quot;device_name&quot;, &quot;test000001&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    vars.get(&quot;result&quot;);
    vars.put(&quot;signature&quot;, new String(result));
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP取样器" enabled="false">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">17919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${signature}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
