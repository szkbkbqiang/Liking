<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/admin/Desktop/apache-jmeter-3.3/lib/ext/JmeterSocket.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512727694000</longProp>
        <longProp name="ThreadGroup.end_time">1512727694000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="跑步机device_id" enabled="true">
          <stringProp name="filename">/Users/admin/Desktop/jmeter脚本/跑步机压测/device_id.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">device_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="跑步机名称" enabled="true">
          <stringProp name="filename">/Users/admin/Desktop/jmeter脚本/跑步机压测/device_name.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">device_name</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="手环" enabled="true">
          <stringProp name="filename">/Users/admin/Desktop/jmeter脚本/跑步机压测/shouhuan.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">bracelet_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

  HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
  MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte)0x65;
    }

    //@Override
    public byte[] getData() {
        JSONObject object = new JSONObject();
        try {
            object.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;gateway_id&quot;, &quot;${device_id}&quot;);
            object.put(&quot;device_name&quot;, &quot;${device_name}&quot;);
            object.put(&quot;device_type&quot;, 4);
            object.put(&quot;control_num&quot;, 10);
            object.put(&quot;online_status&quot;,1);
            object.put(&quot;battery_status&quot;, 1);
            object.put(&quot;device_status&quot;, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

    byte[] result = headerAssemble.assemble(msg);
    String data = Utils.bytesToHex(result);
    vars.put(&quot;65&quot;,data);
    return data;
    return getVariables();
    //vars.get(&quot;65&quot;);
    
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="设备注册(0x65)1111" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${65}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">test</stringProp>
            <stringProp name="RegexExtractor.regex">.</stringProp>
            <stringProp name="RegexExtractor.template">${1}</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderResolver;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;


HeaderResolver resolver =  new HeaderResolver(&quot;keykeykeykeykey1&quot;)

byte[] originData = resolver.decodeBody(${65});

String body = new String(originData, Constant.DEFAULT_CHARSET);
vars.put(&quot;test&quot;,body);
return body;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters">${65}</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderResolver;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.AESUtils;
import com.likingfit.jmeter.socket.utils.ResolverUtils;
import com.likingfit.jmeter.socket.utils.test;
import java.util.Locale;

public class main2 {


    public static void main(String[] args) {
//        String a = vars.get(65);
        HeaderResolver resolver =  new HeaderResolver(&quot;keykeykeykeykey1&quot;);
//        String a = vars.get(65);
        String mes = &quot;56312E302711020006057FD4F2AE4000007061252668CBDD611DAF619E9DA2A04271C3F2D2F6E17D60D9BE04E39FE726CBEA74CF3DA369288FAB659A2D5E873703237319A8CC998FA9FB29BB1330A4245D534A1D83622BCD5AFF4BA9D69AC20ABCD54588C930419336BCE911B13C937F2393EE319F03FDE650091A05CA79E8678BDF4A45DA3F\n&quot;;

        byte[] bbbs = test.hexStringToBytes(mes);

        byte[] dt = new byte[bbbs.length - ResolverUtils.INDEX_DATA];
        System.arraycopy(bbbs, ResolverUtils.INDEX_DATA, dt, 0, dt.length);

        byte[] originData = resolver.decodeBody(dt);

        String body = new String(originData, Constant.DEFAULT_CHARSET);
         System.out.println(body);
    }


}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;, &quot;1&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);

            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;1&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="用户刷卡登录" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${1}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;, &quot;17&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);//手环ID int
            
            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;17&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="跑步开始上报" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${17}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="distance_1" elementType="Argument">
              <stringProp name="Argument.name">distance_1</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_2" elementType="Argument">
              <stringProp name="Argument.name">distance_2</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_3" elementType="Argument">
              <stringProp name="Argument.name">distance_3</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_4" elementType="Argument">
              <stringProp name="Argument.name">distance_4</stringProp>
              <stringProp name="Argument.value">300</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_5" elementType="Argument">
              <stringProp name="Argument.name">distance_5</stringProp>
              <stringProp name="Argument.value">400</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_6" elementType="Argument">
              <stringProp name="Argument.name">distance_6</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_7" elementType="Argument">
              <stringProp name="Argument.name">distance_7</stringProp>
              <stringProp name="Argument.value">600</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_8" elementType="Argument">
              <stringProp name="Argument.name">distance_8</stringProp>
              <stringProp name="Argument.value">700</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_9" elementType="Argument">
              <stringProp name="Argument.name">distance_9</stringProp>
              <stringProp name="Argument.value">800</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_10" elementType="Argument">
              <stringProp name="Argument.name">distance_10</stringProp>
              <stringProp name="Argument.value">900</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_11" elementType="Argument">
              <stringProp name="Argument.name">distance_11</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_12" elementType="Argument">
              <stringProp name="Argument.name">distance_12</stringProp>
              <stringProp name="Argument.value">1100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_13" elementType="Argument">
              <stringProp name="Argument.name">distance_13</stringProp>
              <stringProp name="Argument.value">1200</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_14" elementType="Argument">
              <stringProp name="Argument.name">distance_14</stringProp>
              <stringProp name="Argument.value">1300</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_15" elementType="Argument">
              <stringProp name="Argument.name">distance_15</stringProp>
              <stringProp name="Argument.value">1400</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_16" elementType="Argument">
              <stringProp name="Argument.name">distance_16</stringProp>
              <stringProp name="Argument.value">1500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_17" elementType="Argument">
              <stringProp name="Argument.name">distance_17</stringProp>
              <stringProp name="Argument.value">1600</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_18" elementType="Argument">
              <stringProp name="Argument.name">distance_18</stringProp>
              <stringProp name="Argument.value">1700</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_19" elementType="Argument">
              <stringProp name="Argument.name">distance_19</stringProp>
              <stringProp name="Argument.value">1800</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="distance_20" elementType="Argument">
              <stringProp name="Argument.name">distance_20</stringProp>
              <stringProp name="Argument.value">1900</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
          <stringProp name="TestPlan.comments">0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300</stringProp>
          <stringProp name="ForeachController.inputVal">distance</stringProp>
          <stringProp name="ForeachController.returnVal">distance</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">20</stringProp>
        </ForeachController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="false">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
            <intProp name="groupSize">2000</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;,&quot;12&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;step&quot;, &quot;100&quot;); //此次上报距离上次的距离 单位:米
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);//手环ID int
            obj.put(&quot;distance&quot;, &quot;${distance}&quot;);//总距离
            
            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;12&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex"></stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="跑步中上报数据" enabled="true">
            <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">27919</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${12}</stringProp>
            <boolProp name="TCPSampler.closeConnection">false</boolProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query"></stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;, &quot;6&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);//手环ID int
            obj.put(&quot;period&quot;, &quot;110&quot;);//总运动时间 int
            obj.put(&quot;distance&quot;, &quot;2000&quot;);//总运动距离 int
            obj.put(&quot;cal&quot;, &quot;200&quot;);//消耗卡路里 int
            obj.put(&quot;type&quot;, &quot;1&quot;);// 1 快速启动 2 设定目标  3 预设课程 int
            obj.put(&quot;aim_type&quot;, &quot;0&quot;);// 1 设定运动时间  2 设定公里数 3 设定卡路里 int	
            obj.put(&quot;aim&quot;, &quot;988&quot;);//运动目标 int
            obj.put(&quot;achieve&quot;, &quot;0&quot;);// 0 设定目标未完成  1 设定目标完成 int
            obj.put(&quot;run_time&quot;, &quot;${__time(,)}&quot;);//跑步时间戳
            
            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;6&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="上报锻炼数据" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${6}</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="beanshell sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.alibaba.fastjson.JSONObject;
import com.likingfit.jmeter.socket.Constant;
import com.likingfit.jmeter.socket.HeaderAssemble;
import com.likingfit.jmeter.socket.MessageData;
import com.likingfit.jmeter.socket.utils.Utils;

HeaderAssemble headerAssemble = new HeaderAssemble(new byte[]{0x02, 0x00, 0x06}, &quot;keykeykeykeykey2&quot;, &quot;keykeykeykeykey1&quot;, (short) 10001);
MessageData msg = new MessageData() {
    //@Override
    public byte cmd() {
        return (byte) 0x70;
    }

    //@Override
    public byte[] getData() {


        JSONObject object = new JSONObject();
        try {
            object.put(&quot;cmd&quot;, &quot;3&quot;);

            JSONObject obj = new JSONObject();
            obj.put(&quot;device_id&quot;, &quot;${device_id}&quot;);
            obj.put(&quot;bracelet_id&quot;, &quot;${bracelet_id}&quot;);

            object.put(&quot;data&quot;, obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return object.toString().getBytes();
    }
};

byte[] result = headerAssemble.assemble(msg);
String data = Utils.bytesToHex(result);
vars.put(&quot;3&quot;, data);
return data;
return getVariables();
//vars.get(&quot;65&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="用户刷卡登出" enabled="true">
          <stringProp name="TCPSampler.server">120.24.177.134</stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port">27919</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${3}</stringProp>
          <boolProp name="TCPSampler.closeConnection">true</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query"></stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="用表格察看结果" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1513303185000</longProp>
        <longProp name="ThreadGroup.end_time">1513303185000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
